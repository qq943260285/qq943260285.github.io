<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>一、SpringCloud介绍</title>
      <link href="/posts/40706/"/>
      <url>/posts/40706/</url>
      
        <content type="html"><![CDATA[<h2 id="SpringCloud介绍"><a href="#SpringCloud介绍" class="headerlink" title="SpringCloud介绍"></a>SpringCloud介绍</h2><p>Spring Cloud为开发人员提供了快速构建分布式系统中一些常见模式的工具（例如配置管理，服务发现，断路器，智能路由，微代理，控制总线，一次性令牌，全局锁定，领导选举，分布式会话，集群状态）。分布式系统间的协作产生了一些样板性质的模式，开发者使用 Spring Cloud 就可以快速地构建基于这些模式的服务和应用。</p><p>Spring Cloud是一系列框架的有序集合。它利用Spring Boot的开发便利性巧妙地简化了分布式系统/微服务基础设施的开发，如服务注册发现、配置中心、消息总线、负载均衡、断路器/熔断器、数据监控等，都可以用Spring Boot的开发风格做到一键启动和部署。Spring并没有重复制造轮子，它只是将目前各家公司开发的比较成熟、经得起实际考验的服务框架组合起来，通过Spring Boot风格进行再封装屏蔽掉了复杂的配置和实现原理，最终给开发者留出了一套简单易懂、易部署和易维护的分布式系统/微服务开发工具包。</p><h2 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h2><p>Spring Cloud专注于提供良好的开箱即用经验的典型用例和可扩展性机制覆盖。</p><ul><li>分布式/版本化配置</li><li>服务注册和发现</li><li>路由</li><li>service - to - service调用</li><li>负载均衡</li><li>断路器</li><li>分布式消息传递</li></ul><h2 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h2><h3 id="Spring-Cloud-Config"><a href="#Spring-Cloud-Config" class="headerlink" title="Spring Cloud Config"></a><a href="https://springcloud.cc/spring-cloud-config.html" target="_blank" rel="noopener">Spring Cloud Config</a></h3><p>开发：Spring</p><p><img src="1.SpringCloud介绍/spring-cloud-config.png" alt="Spring Cloud Config"></p><p>配置管理工具包，让你可以把配置放到远程服务器，集中化管理集群配置，目前支持本地存储、Git以及Subversion。</p><h3 id="Spring-Cloud-Bus"><a href="#Spring-Cloud-Bus" class="headerlink" title="Spring Cloud Bus"></a><a href="https://springcloud.cc/spring-cloud-bus.html" target="_blank" rel="noopener">Spring Cloud Bus</a></h3><p>开发：Spring</p><p><img src="1.SpringCloud介绍/spring-cloud-bus.png" alt="Spring Cloud Bus"><br><img src="/posts/40706/spring-cloud-bus.png" title="123说明"></p><p>事件、消息总线，用于在集群（例如，配置变化事件）中传播状态变化，可与Spring Cloud Config联合实现热部署。</p><h3 id="Eureka"><a href="#Eureka" class="headerlink" title="Eureka"></a><a href="https://github.com/Netflix/eureka" target="_blank" rel="noopener">Eureka</a></h3><p>开发：Netflix</p><p><img src="1.SpringCloud介绍/netflix-eureka.jpg" alt="Eureka"></p><p>云端服务发现，一个基于 REST 的服务，用于定位服务，以实现云端中间层服务发现和故障转移。</p><h3 id="Hystrix"><a href="#Hystrix" class="headerlink" title="Hystrix"></a><a href="https://github.com/Netflix/hystrix" target="_blank" rel="noopener">Hystrix</a></h3><p>开发：Netflix</p><p><img src="1.SpringCloud介绍/netflix-hystrix.png" alt="Hystrix"></p><p>熔断器，容错管理工具，旨在通过熔断机制控制服务和第三方库的节点,从而对延迟和故障提供更强大的容错能力。</p><h3 id="Zuul"><a href="#Zuul" class="headerlink" title="Zuul"></a><a href="https://github.com/Netflix/zuul" target="_blank" rel="noopener">Zuul</a></h3><p>开发：Netflix</p><p><img src="1.SpringCloud介绍/netflix-zuul.png" alt="Zuul"></p><p>Zuul 是在云平台上提供动态路由,监控,弹性,安全等边缘服务的框架。Zuul 相当于是设备和 Netflix 流应用的 Web 网站后端所有请求的前门。</p><h3 id="Archaius"><a href="#Archaius" class="headerlink" title="Archaius"></a><a href="https://github.com/Netflix/archaius" target="_blank" rel="noopener">Archaius</a></h3><p>开发：Netflix</p><p><img src="1.SpringCloud介绍/netflix-archaius.png" alt="Archaius"></p><p>配置管理API，包含一系列配置管理API，提供动态类型化属性、线程安全配置操作、轮询框架、回调机制等功能。</p><h3 id="Consul"><a href="#Consul" class="headerlink" title="Consul"></a><a href="https://github.com/HashiCorp/consul" target="_blank" rel="noopener">Consul</a></h3><p>开发：HashiCorp</p><p><img src="1.SpringCloud介绍/hashicorp-consul.png" alt="Consul"></p><p>封装了Consul操作，consul是一个服务发现与配置工具，与Docker容器可以无缝集成。</p><h3 id="Spring-Cloud-for-Cloud-Foundry"><a href="#Spring-Cloud-for-Cloud-Foundry" class="headerlink" title="Spring Cloud for Cloud Foundry"></a><a href="https://github.com/spring-cloud/spring-cloud-cloudfoundry" target="_blank" rel="noopener">Spring Cloud for Cloud Foundry</a></h3><p>开发：Pivotal</p><p><img src="1.SpringCloud介绍/pivotal-cloud-foundry.png" alt="Spring Cloud for Cloud Foundry"></p><p>通过Oauth2协议绑定服务到CloudFoundry，CloudFoundry是VMware推出的开源PaaS云平台。</p><h3 id="Spring-Cloud-Sleuth"><a href="#Spring-Cloud-Sleuth" class="headerlink" title="Spring Cloud Sleuth"></a><a href="https://github.com/spring-cloud/spring-cloud-sleuth" target="_blank" rel="noopener">Spring Cloud Sleuth</a></h3><p>开发：Spring</p><p><img src="1.SpringCloud介绍/spring-cloud-sleuth.png" alt="Spring Cloud Sleuth"></p><p>日志收集工具包，封装了Dapper和log-based追踪以及Zipkin和HTrace操作，为SpringCloud应用实现了一种分布式追踪解决方案。</p><h3 id="Spring-Cloud-Data-Flow"><a href="#Spring-Cloud-Data-Flow" class="headerlink" title="Spring Cloud Data Flow"></a><a href="https://springcloud.cc/spring-cloud-dataflow.html" target="_blank" rel="noopener">Spring Cloud Data Flow</a></h3><p>开发：Pivotal</p><p><img src="1.SpringCloud介绍/spring-cloud-data-flow.png" alt="Spring Cloud Data Flow"></p><p>大数据操作工具，作为Spring XD的替代产品，它是一个混合计算模型，结合了流数据与批量数据的处理方式。</p><h3 id="Spring-Cloud-Security"><a href="#Spring-Cloud-Security" class="headerlink" title="Spring Cloud Security"></a><a href="https://github.com/spring-cloud/spring-cloud-security" target="_blank" rel="noopener">Spring Cloud Security</a></h3><p>开发：Spring</p><p><img src="1.SpringCloud介绍//spring-cloud-security.png" alt="Spring Cloud Security"></p><p>基于spring security的安全工具包，为你的应用程序添加安全控制。</p><h3 id="Spring-Cloud-Zookeeper"><a href="#Spring-Cloud-Zookeeper" class="headerlink" title="Spring Cloud Zookeeper"></a><a href="https://github.com/spring-cloud/spring-cloud-zookeeper" target="_blank" rel="noopener">Spring Cloud Zookeeper</a></h3><p>开发：Spring</p><p><img src="1.SpringCloud介绍/spring-cloud-zookeeper.png" alt="Spring Cloud Zookeeper"></p><p>操作Zookeeper的工具包，用于使用zookeeper方式的服务发现和配置管理。</p><h3 id="Spring-Cloud-Stream"><a href="#Spring-Cloud-Stream" class="headerlink" title="Spring Cloud Stream"></a><a href="https://github.com/spring-cloud/spring-cloud-stream" target="_blank" rel="noopener">Spring Cloud Stream</a></h3><p>开发：Spring</p><p><img src="1.SpringCloud介绍/spring-cloud-stream.png" alt="Spring Cloud Stream"></p><p>数据流操作开发包，封装了与Redis,Rabbit、Kafka等发送接收消息。</p><h3 id="Spring-Cloud-CLI"><a href="#Spring-Cloud-CLI" class="headerlink" title="Spring Cloud CLI"></a><a href="https://springcloud.cc/spring-cloud-cli.html" target="_blank" rel="noopener">Spring Cloud CLI</a></h3><p>开发：Spring</p><p><img src="1.SpringCloud介绍/spring-cloud-cli.png" alt="Spring Cloud CLI"></p><p>基于 Spring Boot CLI，可以让你以命令行方式快速建立云组件。</p><h3 id="Ribbon"><a href="#Ribbon" class="headerlink" title="Ribbon"></a><a href="https://github.com/Netflix/ribbon" target="_blank" rel="noopener">Ribbon</a></h3><p>开发：Netflix</p><p><img src="1.SpringCloud介绍/netflix-ribbon.png" alt="Ribbon"></p><p>提供云端负载均衡，有多种负载均衡策略可供选择，可配合服务发现和断路器使用。</p><h3 id="Turbine"><a href="#Turbine" class="headerlink" title="Turbine"></a><a href="https://github.com/Netflix/turbine" target="_blank" rel="noopener">Turbine</a></h3><p>开发：Netflix</p><p><img src="1.SpringCloud介绍/netflix-turbine.png" alt="Turbine"></p><p>Turbine是聚合服务器发送事件流数据的一个工具，用来监控集群下hystrix的metrics情况。</p><h3 id="Feign"><a href="#Feign" class="headerlink" title="Feign"></a><a href="https://github.com/OpenFeign/feign" target="_blank" rel="noopener">Feign</a></h3><p>开发：OpenFeign</p><p><img src="1.SpringCloud介绍/netflix-feign.png" alt="Feign"></p><p>Feign是一种声明式、模板化的HTTP客户端。</p><h3 id="Spring-Cloud-Task"><a href="#Spring-Cloud-Task" class="headerlink" title="Spring Cloud Task"></a><a href="https://github.com/spring-cloud/spring-cloud-task" target="_blank" rel="noopener">Spring Cloud Task</a></h3><p>开发：Spring</p><p><img src="1.SpringCloud介绍/spring-cloud-task.png" alt="Spring Cloud Task"></p><p>提供云端计划任务管理、任务调度。</p><h3 id="Spring-Cloud-Connectors"><a href="#Spring-Cloud-Connectors" class="headerlink" title="Spring Cloud Connectors"></a><a href="https://springcloud.cc/spring-cloud-connectors.html" target="_blank" rel="noopener">Spring Cloud Connectors</a></h3><p>开发：Spring</p><p><img src="1.SpringCloud介绍/spring-cloud-connectors.png" alt="Spring Cloud Connectors"></p><p>便于云端应用程序在各种PaaS平台连接到后端，如：数据库和消息代理服务。</p><h3 id="Spring-Cloud-Cluster"><a href="#Spring-Cloud-Cluster" class="headerlink" title="Spring Cloud Cluster"></a><a href="https://github.com/spring-cloud/spring-cloud-cluster" target="_blank" rel="noopener">Spring Cloud Cluster</a></h3><p>开发：Spring</p><p><img src="1.SpringCloud介绍/spring-cloud-cluster.png" alt="Spring Cloud Cluster"></p><p>提供Leadership选举，如：Zookeeper, Redis, Hazelcast, Consul等常见状态模式的抽象和实现。</p><h3 id="Spring-Cloud-Starters"><a href="#Spring-Cloud-Starters" class="headerlink" title="Spring Cloud Starters"></a><a href="https://github.com/spring-cloud/spring-cloud-stream-starters" target="_blank" rel="noopener">Spring Cloud Starters</a></h3><p>开发：Pivotal</p><p><img src="1.SpringCloud介绍/spring-cloud-starters.png" alt="Spring Cloud Starters"></p><p>Spring Boot式的启动项目，为Spring Cloud提供开箱即用的依赖管理。</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> SpringCloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 介绍 </tag>
            
            <tag> Java </tag>
            
            <tag> SpringCloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一、RabbitMQ介绍</title>
      <link href="/posts/27860/"/>
      <url>/posts/27860/</url>
      
        <content type="html"><![CDATA[<h2 id="RabbitMQ介绍"><a href="#RabbitMQ介绍" class="headerlink" title="RabbitMQ介绍"></a>RabbitMQ介绍</h2><p>RabbitMQ（Rabbit Message Queue）的简写，但不能仅仅理解其为消息队列，消息代理更合适。RabbitMQ 是一个由 <strong>Erlang</strong> 语言开发的AMQP（Advanced Message Queuing Protocol）（高级消息队列协议）的开源实现。</p><p>支持多种客户端，如：<code>Python、Ruby、.NET、Java、JMS、C、PHP、ActionScript、XMPP、STOMP等，支持AJAX</code>,<strong>最重要的是也支持OC和swift</strong>。用于在分布式系统中存储转发消息，在易用性、扩展性、高可用性等方面表现不错。</p><p>消息队列中间件是分布式系统中重要的组件，主要解决<strong>应用耦合</strong>，<strong>异步消息</strong>，<strong>流量削锋</strong>等问题。实现<strong>高性能</strong>，<strong>高可用</strong>，<strong>可伸缩</strong>和<strong>最终一致性</strong>架构。是大型分布式系统不可缺少的中间件。</p><p>RabbitMQ提供了可靠的消息机制、跟踪机制和灵活的消息路由，支持消息集群和分布式部署。适用于排队算法、秒杀活动、消息分发、异步处理、数据同步、处理耗时任务、CQRS等应用场景。</p><p>消息系统允许软件应用相互连接和扩展．这些应用可以相互链接起来组成一个更大的应用，或者将用户设备和数据进行连接．消息系统通过将消息的发送和接收分离来实现应用程序的异步和解偶。</p><p>RabbitMQ是一个消息代理，一个消息系统的媒介。它可以为你的应用提供一个通用的消息发送和接收平台，并且保证消息再传输过程中的安全。</p><p>RabbitMQ是一个消息代理。它的核心原理非常简单：接收和发送消息。你可以把它想像成一个邮局：你把信件放入邮箱，邮递员就会把信件投递到你的收件人处。在这个比喻中，RabbitMQ 就扮演着邮箱、邮局以及邮递员的角色。</p><p>RabbitMQ和邮局的主要区别是，它不是用来处理纸张的，它是用来接收、存储和发送消息（message）这种二进制数据的。</p><p>RabbitMQ的官网是<a href="http://www.rabbitmq.com" target="_blank" rel="noopener">http://www.rabbitmq.com</a></p><h2 id="AMQP协议"><a href="#AMQP协议" class="headerlink" title="AMQP协议"></a>AMQP协议</h2><p><strong>AMQP</strong>，即<code>Advanced Message Queuing Protocol</code>，高级消息队列协议，是应用层协议的一个开放标准，为面向消息的中间件设计。消息中间件主要用于组件之间的解耦，消息的发送者无需知道消息使用者的存在，反之亦然。</p><p>AMQP的主要特征是面向消息、队列、路由（包括点对点和发布/订阅）、可靠性、安全。</p>]]></content>
      
      
      <categories>
          
          <category> RabbitMQ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 介绍 </tag>
            
            <tag> RabbitMQ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一、Redis介绍</title>
      <link href="/posts/37830/"/>
      <url>/posts/37830/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
            <tag> 介绍 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一、SpringBoot介绍</title>
      <link href="/posts/61680/"/>
      <url>/posts/61680/</url>
      
        <content type="html"><![CDATA[<h1 id="SpringBoot介绍"><a href="#SpringBoot介绍" class="headerlink" title="SpringBoot介绍"></a>SpringBoot介绍</h1><h2 id="1、介绍Spring-Boot"><a href="#1、介绍Spring-Boot" class="headerlink" title="1、介绍Spring Boot"></a>1、介绍Spring Boot</h2><p>Spring Boot可以轻松地创建独立的、生产级的、基于Spring的应用程序。官方对Spring平台和第三方库进行了常用的习惯配置，这样可以轻松上手了。大多数Spring Boot应用程序只需要很少的Spring配置。</p><p>你可以使用Spring Boot创建基于 <code>java -jar</code> 或传统的war部署启动的Java应用程序 。</p><p>Spring Boot的主要目标是：</p><ul><li>为Spring开发者提供更快且可广泛访问的入门体验。</li><li>开箱即用，提供各种默认配置来简化项目配置。</li><li>提供大型项目（例如嵌入式服务器，安全性，度量标准，运行状况检查和外部化配置）通用的一系列非功能性功能。</li><li>没有冗余代码生成，也不需要XML配置。</li></ul><h2 id="2、系统要求"><a href="#2、系统要求" class="headerlink" title="2、系统要求"></a>2、系统要求</h2><p><strong>Spring Boot 2.1.3.RELEASE</strong>需要Java 8并且与Java 11兼容（包括在内）。 还需要Spring Framework 5.1.5.RELEASE或更高版本。</p><p>为以下构建工具提供了显式构建支持：</p><table><thead><tr><th style="text-align:left">构建工具</th><th style="text-align:left">版本</th></tr></thead><tbody><tr><td style="text-align:left">Maven</td><td style="text-align:left">3.3+</td></tr><tr><td style="text-align:left">Gradle</td><td style="text-align:left">4.4+</td></tr></tbody></table><p><strong>Spring Boot 2.2.0.BUILD-SNAPSHOT</strong> 需要Java 8并且与Java 11兼容（包括在内）。 还需要Spring Framework 5.2.0.BUILD-SNAPSHOT或更高版本。</p><p>为以下构建工具提供了显式构建支持：</p><table><thead><tr><th style="text-align:left">构建工具</th><th style="text-align:left">版本</th></tr></thead><tbody><tr><td style="text-align:left">Maven</td><td style="text-align:left">3.3+</td></tr><tr><td style="text-align:left">Gradle</td><td style="text-align:left">4.4+</td></tr></tbody></table><h3 id="2-1、Servlet容器"><a href="#2-1、Servlet容器" class="headerlink" title="2.1、Servlet容器"></a>2.1、Servlet容器</h3><p>Spring Boot支持以下嵌入式servlet容器：</p><table><thead><tr><th style="text-align:left">名称</th><th style="text-align:left">Servlet版本</th></tr></thead><tbody><tr><td style="text-align:left">Tomcat 9.0</td><td style="text-align:left">4.0</td></tr><tr><td style="text-align:left">Jetty 9.4</td><td style="text-align:left">3.1</td></tr><tr><td style="text-align:left">Undertow 2.0</td><td style="text-align:left">4.0</td></tr></tbody></table><p>您还可以将Spring Boot应用程序部署到任何Servlet 3.1+兼容容器。</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> Spring Boot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 介绍 </tag>
            
            <tag> Java </tag>
            
            <tag> Spring Boot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二、Servlet生命周期</title>
      <link href="/posts/49039/"/>
      <url>/posts/49039/</url>
      
        <content type="html"><![CDATA[<h1 id="Servlet生命周期"><a href="#Servlet生命周期" class="headerlink" title="Servlet生命周期"></a>Servlet生命周期</h1><p>Servlet 生命周期可被定义为从创建直到毁灭的整个过程。以下是 Servlet 遵循的过程：</p><ul><li>Servlet 通过调用 <strong>init ()</strong> 方法进行初始化。</li><li>Servlet 调用 <strong>service()</strong> 方法来处理客户端的请求。</li><li>Servlet 通过调用 <strong>destroy()</strong> 方法终止（结束）。</li><li>最后，Servlet 是由 JVM 的垃圾回收器进行垃圾回收的。</li></ul><p>现在让我们详细讨论生命周期的方法。</p><h2 id="init-方法"><a href="#init-方法" class="headerlink" title="init() 方法"></a>init() 方法</h2><p>init 方法被设计成只调用一次。它在第一次创建 Servlet 时被调用，在后续每次用户请求时不再调用。因此，它是用于一次性初始化，就像 Applet 的 init 方法一样。</p><p>Servlet 创建于用户第一次调用对应于该 Servlet 的 URL 时，但是您也可以指定 Servlet 在服务器第一次启动时被加载。</p><p>当用户调用一个 Servlet 时，就会创建一个 Servlet 实例，每一个用户请求都会产生一个新的线程，适当的时候移交给 doGet 或 doPost 方法。init() 方法简单地创建或加载一些数据，这些数据将被用于 Servlet 的整个生命周期。</p><p>init 方法的定义如下：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 初始化代码...</span><span class="token punctuation">}</span></code></pre><h2 id="service-方法"><a href="#service-方法" class="headerlink" title="service() 方法"></a>service() 方法</h2><p>service() 方法是执行实际任务的主要方法。Servlet 容器（即 Web 服务器）调用 service() 方法来处理来自客户端（浏览器）的请求，并把格式化的响应写回给客户端。</p><p>每次服务器接收到一个 Servlet 请求时，服务器会产生一个新的线程并调用服务。service() 方法检查 HTTP 请求类型（GET、POST、PUT、DELETE 等），并在适当的时候调用 doGet、doPost、doPut，doDelete 等方法。</p><p>下面是该方法的特征：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">service</span><span class="token punctuation">(</span>ServletRequest request<span class="token punctuation">,</span>                     ServletResponse response<span class="token punctuation">)</span>       <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException<span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><p>service() 方法由容器调用，service 方法在适当的时候调用 doGet、doPost、doPut、doDelete 等方法。所以，您不用对 service() 方法做任何动作，您只需要根据来自客户端的请求类型来重写 doGet() 或 doPost() 即可。</p><p>doGet() 和 doPost() 方法是每次服务请求中最常用的方法。下面是这两种方法的特征。</p><h2 id="doGet-方法"><a href="#doGet-方法" class="headerlink" title="doGet() 方法"></a>doGet() 方法</h2><p>GET 请求来自于一个 URL 的正常请求，或者来自于一个未指定 METHOD 的 HTML 表单，它由 doGet() 方法处理。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span>                  HttpServletResponse response<span class="token punctuation">)</span>    <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// Servlet 代码</span><span class="token punctuation">}</span></code></pre><h2 id="doPost-方法"><a href="#doPost-方法" class="headerlink" title="doPost() 方法"></a>doPost() 方法</h2><p>POST 请求来自于一个特别指定了 METHOD 为 POST 的 HTML 表单，它由 doPost() 方法处理。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span>                   HttpServletResponse response<span class="token punctuation">)</span>    <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// Servlet 代码</span><span class="token punctuation">}</span></code></pre><h2 id="destroy-方法"><a href="#destroy-方法" class="headerlink" title="destroy() 方法"></a>destroy() 方法</h2><p>destroy() 方法只会被调用一次，在 Servlet 生命周期结束时被调用。destroy() 方法可以让您的 Servlet 关闭数据库连接、停止后台线程、把 Cookie 列表或点击计数器写入到磁盘，并执行其他类似的清理活动。</p><p>在调用 destroy() 方法之后，servlet 对象被标记为垃圾回收。destroy 方法定义如下所示：</p><pre class=" language-java"><code class="language-java">  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 终止化代码...</span>  <span class="token punctuation">}</span></code></pre><h2 id="架构图"><a href="#架构图" class="headerlink" title="架构图"></a>架构图</h2><p>下图显示了一个典型的 Servlet 生命周期方案。</p><ul><li>第一个到达服务器的 HTTP 请求被委派到 Servlet 容器。</li><li>Servlet 容器在调用 service() 方法之前加载 Servlet。</li><li>然后 Servlet 容器处理由多个线程产生的多个请求，每个线程执行一个单一的 Servlet 实例的 service() 方法。</li></ul><p><img src="assets/Servlet-LifeCycle-1553658939541.jpg" alt="Servlet 生命周期"></p>]]></content>
      
      
      <categories>
          
          <category> Servlet </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Servlet </tag>
            
            <tag> Java基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一、Servlet介绍</title>
      <link href="/posts/59988/"/>
      <url>/posts/59988/</url>
      
        <content type="html"><![CDATA[<h1 id="Servlet-简介"><a href="#Servlet-简介" class="headerlink" title="Servlet 简介"></a>Servlet 简介</h1><p>Servlet 是一些遵从Java Servlet API的Java类，这些Java类可以响应请求。尽管Servlet可以响应任意类型的请求，但是它们使用最广泛的是响应web方面的请求。 Servlet必须部署在Java servlet容器才能使用。虽然很多开发者都使用Java Server Pages（JSP）和Java Server Faces（JSF）等Servlet框架，但是这些技术都要在幕后通过Servlet容器把页面编译为Java Servlet。也就是说，了解<strong>Java Servlet技术的基础知识</strong>对任何Java web开发者来说是很有用的。</p><p>Java Servlet 是运行在 Web 服务器或应用服务器上的程序，它是作为来自 Web 浏览器或其他 HTTP 客户端的请求和 HTTP 服务器上的数据库或应用程序之间的中间层。</p><p>使用 Servlet，您可以收集来自网页表单的用户输入，呈现来自数据库或者其他源的记录，还可以动态创建网页。</p><p>Java Servlet 通常情况下与使用 CGI（Common Gateway Interface，公共网关接口）实现的程序可以达到异曲同工的效果。但是相比于 CGI，Servlet 有以下几点优势：</p><ul><li>性能明显更好。</li><li>Servlet 在 Web 服务器的地址空间内执行。这样它就没有必要再创建一个单独的进程来处理每个客户端请求。</li><li>Servlet 是独立于平台的，因为它们是用 Java 编写的。</li><li>服务器上的 Java 安全管理器执行了一系列限制，以保护服务器计算机上的资源。因此，Servlet 是可信的。</li><li>Java 类库的全部功能对 Servlet 来说都是可用的。它可以通过 sockets 和 RMI 机制与 applets、数据库或其他软件进行交互。</li></ul><h2 id="Servlet-架构"><a href="#Servlet-架构" class="headerlink" title="Servlet 架构"></a>Servlet 架构</h2><p>下图显示了 Servlet 在 Web 应用程序中的位置。</p><p><img src="assets/servlet-arch.jpg" alt="Servlet 架构"></p><h2 id="Servlet-任务"><a href="#Servlet-任务" class="headerlink" title="Servlet 任务"></a>Servlet 任务</h2><p>Servlet 执行以下主要任务：</p><ul><li>读取客户端（浏览器）发送的显式的数据。这包括网页上的 HTML 表单，或者也可以是来自 applet 或自定义的 HTTP 客户端程序的表单。</li><li>读取客户端（浏览器）发送的隐式的 HTTP 请求数据。这包括 cookies、媒体类型和浏览器能理解的压缩格式等等。</li><li>处理数据并生成结果。这个过程可能需要访问数据库，执行 RMI 或 CORBA 调用，调用 Web 服务，或者直接计算得出对应的响应。</li><li>发送显式的数据（即文档）到客户端（浏览器）。该文档的格式可以是多种多样的，包括文本文件（HTML 或 XML）、二进制文件（GIF 图像）、Excel 等。</li><li>发送隐式的 HTTP 响应到客户端（浏览器）。这包括告诉浏览器或其他客户端被返回的文档类型（例如 HTML），设置 cookies 和缓存参数，以及其他类似的任务。</li></ul><h2 id="Servlet-包"><a href="#Servlet-包" class="headerlink" title="Servlet 包"></a>Servlet 包</h2><p>Java Servlet 是运行在带有支持 Java Servlet 规范的解释器的 web 服务器上的 Java 类。</p><p>Servlet 可以使用 <strong>javax.servlet</strong> 和 <strong>javax.servlet.http</strong> 包创建，它是 Java 企业版的标准组成部分，Java 企业版是支持大型开发项目的 Java 类库的扩展版本。</p><p>这些类实现 Java Servlet 和 JSP 规范。在写本教程的时候，二者相应的版本分别是 Java Servlet 2.5 和 JSP 2.1。</p><p>Java Servlet 就像任何其他的 Java 类一样已经被创建和编译。在您安装 Servlet 包并把它们添加到您的计算机上的 Classpath 类路径中之后，您就可以通过 JDK 的 Java 编译器或任何其他编译器来编译 Servlet。</p>]]></content>
      
      
      <categories>
          
          <category> Servlet </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Servlet </tag>
            
            <tag> Java基础 </tag>
            
            <tag> 介绍 </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客文章模板</title>
      <link href="/posts/50034/"/>
      <url>/posts/50034/</url>
      
        <content type="html"><![CDATA[<h1 id="文章正文"><a href="#文章正文" class="headerlink" title="文章正文"></a>文章正文</h1><pre class=" language-text"><code class="language-text"># 标题title: 博客文章模板# 时间date: 2019-01-01 00:00:00# 作者author: 小宇# 图片推荐使用图床(腾讯云、七牛云、又拍云等)来做图片的路径.如:http://xxx.com/xxx.jpgimg: /source/images/xxx.jpg# 如果top值为true，则会是首页推荐文章top: true# 如果要对文章设置阅读验证密码的话，就可以在设置password的值，该值必须是用SHA256加密后的密码，防止被他人识破password: 8d969eef6e1230c3f5d5a86aff3ca12020c923adc6c92# 本文章是否开启mathjax，且需要在主题的_config.yml文件中也需要开启才行mathjax: false# 摘要设置summary: 这是文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要# 分类设置categories: Markdown# 标签设置tags:  - 标签  - Typora  - Markdown  - 模板</code></pre>]]></content>
      
      
      <categories>
          
          <category> 博客模板 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 标签 </tag>
            
            <tag> 模板 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
